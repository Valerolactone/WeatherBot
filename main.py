from background import keep_alive
from aiogram import Bot, Dispatcher, executor, types
import datetime
import requests
import json

OPEN_WEATHER_TOKEN = 'b142e3d9effdf086abc15456f2db13b6'
TG_BOT_TOKEN = '7008077074:AAEpoLUbfpNgHu7BzhNXUuDpKQSoXa5bqSo'

bot = Bot(TG_BOT_TOKEN)
dp = Dispatcher(bot)

weather_smile = {
    'Clear': '‚òÄÔ∏è',
    'Clouds': '‚õÖÔ∏è',
    'Rain': 'üåß',
    'Drizzle': 'üå¶',
    'Thunderstorm': '‚õà',
    'Snow': '‚ùÑÔ∏è',
    'Mist': 'üå´',
}

temperature_smile = {
    'cold': 'ü•∂',
    'comfort': 'üôÇ',
    'hot': 'ü•µ',
}

wind_smile = {
    'gentle': 'üå¨',
    'medium': 'üí®',
    'heavy': 'üå™',
}


@dp.message_handler(commands=['start'])
async def info(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã', callback_data='city'))
    markup.add(types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', callback_data='list'))
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —Ç—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.', reply_markup=markup)


@dp.message_handler(commands=['listCity'])
async def reply(message: types.Message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add(types.InlineKeyboardButton('–ë—Ä–µ—Å—Ç'))
    markup.add(types.InlineKeyboardButton('–í–∏—Ç–µ–±—Å–∫'))
    markup.add(types.InlineKeyboardButton('–ì–æ–º–µ–ª—å'))
    markup.add(types.InlineKeyboardButton('–ì—Ä–æ–¥–Ω–æ'))
    markup.add(types.InlineKeyboardButton('–ú–∏–Ω—Å–∫'))
    markup.add(types.InlineKeyboardButton('–ú–æ–≥–∏–ª–µ–≤'))
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–±–ª–∞—Å—Ç–Ω–æ–π —Ü–µ–Ω—Ç—Ä –ë–µ–ª–∞—Ä—É—Å–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–∞–º –ø–æ–≥–æ–¥—É.',
                         reply_markup=markup)


@dp.callback_query_handler()
async def callback(call):
    if call.data == 'list':
        await call.message.answer('/listCity\n/start')
    elif call.data == 'city':
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')


@dp.message_handler(content_types=['text'])
async def reply(message: types.Message):
    city = message.text.lower().strip()
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&lang=ru&appid={OPEN_WEATHER_TOKEN}&units=metric'
    result = requests.get(url)
    data = json.loads(result.text)
    if result.status_code == 200:
        current_temperature = data['main']['temp']
        feels_like_temperature = data['main']['feels_like']
        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        wind_speed = data['wind']['speed']
        wind_gust = data['wind']['gust']
        weather = data['weather'][0]['main']
        weather_description = data['weather'][0]['description']

        if weather in weather_smile:
            wheather_icon = weather_smile[weather]

        if current_temperature < 8:
            temperature_icon = temperature_smile['cold']
        elif 8 <= current_temperature <= 25:
            temperature_icon = temperature_smile['comfort']
        else:
            temperature_icon = temperature_smile['hot']

        if wind_speed < 10:
            wind_icon = wind_smile['gentle']
        elif 10 <= wind_speed <= 17:
            wind_icon = wind_smile['medium']
        else:
            wind_icon = wind_smile['heavy']

        await message.answer(f'üë©‚Äçüíªüë©‚Äçüíªüë©‚Äçüíª{datetime.datetime.now().strftime("%d-%m-%Y %H:%M")}üë©‚Äçüíªüë©‚Äçüíªüë©‚Äçüíª\n'
                             f'–í –≥–æ—Ä–æ–¥–µ {message.text} —Å–µ–π—á–∞—Å {weather_description} {wheather_icon}\n'
                             f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {current_temperature} ¬∞C {temperature_icon}\n'
                             f'–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like_temperature} ¬∞C\n'
                             f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ {wind_speed} –º/—Å —Å –ø–æ—Ä—ã–≤–∞–º–∏ –¥–æ {wind_gust} –º/—Å {wind_icon}\n'
                             f'–í–ª–∞–∂–Ω–æ—Å—Ç—å {humidity}%\n'
                             f'–î–∞–≤–ª–µ–Ω–∏–µ {pressure} –º–º.—Ä—Ç.—Å—Ç\n')

    elif result.status_code == 404:
        await message.answer('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.')


keep_alive()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
